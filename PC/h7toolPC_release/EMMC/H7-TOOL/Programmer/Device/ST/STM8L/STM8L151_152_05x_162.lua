
-------------------------------------------------------
-- 文件名 : STM8L151_152.lua
-- 版  本 : V1.0  2020-04-28
-- 说  明 :
-------------------------------------------------------
function config_cpu(void)
	DeviceList = {
		"STM8L151F2",  4 * 1024, 256,
		"STM8L151G2",  4 * 1024, 256,
		"STM8L151K2",  4 * 1024, 256,
		"STM8L151C2",  4 * 1024, 256,

		"STM8L151F3",  8 * 1024, 256,
		"STM8L151G3",  8 * 1024, 256,
		"STM8L151K3",  8 * 1024, 256,
		"STM8L151C3",  8 * 1024, 256,

		"STM8L151G4",  16 * 1024, 1 * 1024,
		"STM8L151G4",  16 * 1024, 1 * 1024,
		"STM8L151C4",  16 * 1024, 1 * 1024,

		"STM8L151G6",  32 * 1024, 1 * 1024,
		"STM8L151G6",  32 * 1024, 1 * 1024,
		"STM8L151C6",  32 * 1024, 1 * 1024,

		"STM8L151C8",  64 * 1024, 2 * 1024,
		"STM8L151K8",  64 * 1024, 2 * 1024,
		"STM8L151R8",  64 * 1024, 2 * 1024,
		"STM8L151M8",  64 * 1024, 2 * 1024,
		"STM8L151R6",  32 * 1024, 2 * 1024,

		"STM8L152C4",  16 * 1024, 1 * 1024,
		"STM8L152C6",  32 * 1024, 1 * 1024,
		"STM8L152C8",  64 * 1024, 2 * 1024,
		"STM8L152K4",  16 * 1024, 1 * 1024,
		"STM8L152K6",  32 * 1024, 1 * 1024,
		"STM8L152K8",  64 * 1024, 2 * 1024,
		"STM8L152R8",  64 * 1024, 2 * 1024,
		"STM8L152M8",  64 * 1024, 2 * 1024,
		"STM8L152R6",  32 * 1024, 2 * 1024,

		"STM8L162R8",  64 * 1024, 2 * 1024,
		"STM8L162M6",  64 * 1024, 2 * 1024,

		"STM8L050J3",  8 * 1024,  256,
		"STM8L051F3",  8 * 1024,  256,
		"STM8L052R8",  64 * 1024, 256,
		"STM8L052C6",  32 * 1024, 256,
	}

	CHIP_TYPE = "SWIM"			--指定器件接口类型: "SWD", "SWIM", "SPI", "I2C"

	STM8_SERIAL = "STM8L"		--选择2个系列: "STM8S" 或 "STM8L"

	FLASH_ADDRESS = 0x008000	--定义FLASH起始地址

	EEPROM_ADDRESS = 0x001000 	--定义EEPROM起始地址(STM8S和STM8L不同）

	for i = 1, #DeviceList, 3 do
		if (DEVICE == DeviceList[i]) then
			FLASH_SIZE  = DeviceList[i + 1]	--FLASH总容量
			EEPROM_SIZE = DeviceList[i + 2]	--EEPROM容量

			--定义BLOCK SIZE, 只有64和128两种
			if (FLASH_SIZE <= 8 * 1024) then
				FLASH_BLOCK_SIZE = 64
			else
				FLASH_BLOCK_SIZE = 128
			end

			break
		end
	end

	UID_ADDR = 0x4926			--UID地址，不同的CPU不同

	OB_ADDRESS     = "4800 4802 4807 4808 4809 480A 480B 480C"

	OB_SECURE_OFF  = "AA 00 00 00 00 00 00 00 00"	--SECURE_ENABLE = 0时，编程完毕后写入该值 (不含反码字节）
	OB_SECURE_ON   = "00 00 00 00 00 00 00 00 00"	--SECURE_ENABLE = 1时，编程完毕后写入该值

	MCU_REMOVE_PROTECT = 1		--1表示使用 MCU_RemoveProtect() 解除保护
end

-- STM8L05x/15x, medium density STM8L05x/15x and STM8AL31xx/STM8AL3Lxx and high density STM8L05x/15x/16x microcontrollers,
-- 需要操作2次写入才能解除保护
function MCU_RemoveProtect(void)
	pg_prog_buf_ob("4800", "AA")
	delayms(5)
	pg_prog_buf_ob("4800", "AA")
	delayms(5)
	pg_reset()
end


--用于PC软件, 设置缺省配置参数
function pc_default(void)
	TVCC_VOLT = 3.3			--定义CPU供电电压TVCC
	
	VERIFY_MODE = 1			--校验模式: 0:自动(FLM提供校验函数或读回) 1:读回  2:软件CRC32  3:STM32硬件CRC32

	REMOVE_RDP_POWEROFF = 1 --写完OB后需要断电
	POWEROFF_TIME1 = 0   	--写完OB延迟时间ms
	POWEROFF_TIME2 = 100   	--断电时间ms
	POWEROFF_TIME3 = 20   	--上电后等待时间ms

	SWD_CLOCK_DELAY_0 = 0 	--单路烧录时的时钟延迟
	SWD_CLOCK_DELAY_1 = 0 	--多路烧录时的时钟延迟
	
	AUTO_REMOVE_PROTECT = 1 --自动解除读保护

	NOTE_PC = ""

	--供PC软件选择算法的列表
	AlgoFile_List = {
		"FLASH",
		"EEPROM",
	}	
end

---------------------------结束-----------------------------------
